// Code generated by "esc -o static/static.go -pkg static static"; DO NOT EDIT.

package static

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/graphiql/graphiql.html": {
		name:    "graphiql.html",
		local:   "static/graphiql/graphiql.html",
		size:    1650,
		modtime: 1555514466,
		compressed: `
H4sIAAAAAAAC/7SVb4/jNBDGXyefYrCELpVaOwVOQmlane4PCLSwd+xJiJdee5p4z7GD7TRbVf3uKE6z
ty3LcULcq8bjmZ+fiZ9pyq9eX796/8fbN1CHRm/ScvgBzU21JmjIEEAuN2lSamU+gEO9Jj7sNfoaMRCo
HW7XpA6h9QVjQpo7T4W2ndxq7pAK2zB+x++ZVreeVY63tfpTs5wul3SZPwSo8J4AG47xwqk2gHfis7Fb
DKJmS7qk+fhMG2XonSebko24/wh2yEVgy+f0Of1uXHw58kLa5v+i//N7/hScsc60H6rI8t3tuKWs8Yvg
uPGtdWHR+xc5/Z5+y26d7T06JrRCEz6bOwlZnB8Qbw3di5zm9Jt/YwcVNG4qu4iwC9YC73nTaizZmJaW
bDRweWvlHqJ116RXMtQFLPP86xXUqKo6TKuGu0qZAvIV2B26rbZ9AbWSEs1qGAepdqDkmkydkIn5CLOr
V2RzZblUpqKUlkyq3SYtH1rYdkYMYiFC3l39MLafnZZvueONn8EhTRKHoXMG4gvKCDu1TOZxM2kw1FYW
QFrrA5kPoaHNAn6+uf6V+uCUqdR2fwGOecKhRBMU174AoozQncSIOM5oqNFkDyozh761xuMoadI0RWnA
+5DNVp8sfWnl/lQe3H58mEBRbMudx/P0gZgcQfAgasjQOetm55WP08fsKGKVJsc0TXbcwZnPXkVDwRoM
9tArI21Pbx4nvJ+M/rs/2xgLs2f9MHzaCq5r60NxOACF43G6lWdzOIBDYY1BEQoIrkOIav6m5HTjsJ5k
/Bjt9O7q5oksemGTJ3qaX1hptkrT5Lfhf+X19S/UoZHosjQZQ1Q45AHfaGyGrqaj53A4zWHxpNhjNI60
ohvKaIXhRHi5/0lmHwdiliazVfpxYks2eDJO4vCJ+SsAAP//S16m4HIGAAA=
`,
	},

	"/static/graphql/schema/subscription-api.graphql": {
		name:    "subscription-api.graphql",
		local:   "static/graphql/schema/subscription-api.graphql",
		size:    664,
		modtime: 1563199568,
		compressed: `
H4sIAAAAAAAC/5SSQY/TMBCF7/4Vb5dLK21WosdI/AGEtkLlhpB24k4SI2cc7ElhhfrfkR0HcuWUZOa9
L543TpY8RXy8nF/O3Xe2amrl3PeJ1ZhkR54Ivw3wY+H41uJzfhggLV2y0c3qgrS47L7M3Rh9m3mVFu87
fHJJQTdynjrP0DA7m54N6luLrxeNToaHbw9//XtoxdRSlwngG4smBIGOjMHdWFZc5pbmwQDZ9kITI/RF
VxTZnnas5yIsk6zHeKrOL2M25jDgrtllg6RlYvQxTDgQJEgjPJC6G0OWqeN4fEKIbQU0eG3ev7bl11NI
isiWRTfov0j6EEGYKaorAx9Yrscd5FQhnul/KB0PTsTJUFmVeOWeFq8tmlOpkLZ16fiAx+b0uAVwmdm6
3nECoQvBMwn41xw5pcwn78NPJ0OOpndeOW5rmUjtWDojY458dZaU16C33hb3sd3fwbv5EwAA///cbael
mAIAAA==
`,
	},

	"/static/static.go": {
		name:    "static.go",
		local:   "static/static.go",
		size:    0,
		modtime: 1565170347,
		compressed: `
H4sIAAAAAAAC/wEAAP//AAAAAAAAAAA=
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},

	"/static/graphiql": {
		name:  "graphiql",
		local: `static/graphiql`,
		isDir: true,
	},

	"/static/graphql": {
		name:  "graphql",
		local: `static/graphql`,
		isDir: true,
	},

	"/static/graphql/schema": {
		name:  "schema",
		local: `static/graphql/schema`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/graphiql"],
		_escData["/static/graphql"],
		_escData["/static/static.go"],
	},

	"static/graphiql": {
		_escData["/static/graphiql/graphiql.html"],
	},

	"static/graphql": {
		_escData["/static/graphql/schema"],
	},

	"static/graphql/schema": {
		_escData["/static/graphql/schema/subscription-api.graphql"],
	},
}
